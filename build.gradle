plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springBootDependencyManagementVersion}"
//    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
}

group = 'pl.szczecin'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.boot:spring-boot-starter-security'

    // database
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    // annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // api
//    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"

    // Po wygenerowaniu klienta (plugin generator), trzeba bedzie dodać poniższe zależności, żeby kod się kompilował
//    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
//    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
//    implementation "io.swagger:swagger-annotations:${swaggerAnnotationVersion}"

    // warning: unknown enum constant When.MAYBE
    // reason: class file for javax.annotation.meta.When not found
//    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
//    testImplementation 'org.springframework.security:spring-security-test'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
//    testImplementation 'org.testcontainers:junit-jupiter'
//    testImplementation 'org.testcontainers:postgresql'

    // Integration tests
    // Ta zależność musi być przed wiremock standalone
//    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
//    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
//    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

//https://github.com/OpenAPITools/openapi-generator/tree/master/modules
//https://openapi-generator.tech/docs/generators/java/
//https://openapi-generator.tech/docs/plugins
//http://www.cepik.gov.pl/interfejs-dla-cepik
//https://api.cepik.gov.pl/doc

//openApiGenerate {
//    generatorName = "java"
//    library = "webclient"
//    configOptions = [
//            serializableModel   : "true",
//            dateLibrary         : "java8",
//            serializationLibrary: "jackson"
//    ]
//
//    // wygenerowane klasy
//    outputDir = "$buildDir/generated-sources/openapi".toString()
//    // plik z kontraktem
//    inputSpec = "$rootDir/src/main/resources/contracts/cepik-1.1.3.json".toString()
//    // miejsce wygenerowania klientow
//    apiPackage = "pl.zajavka.infrastructure.cepik.api"
//    // miejsce zmapowania jsnow na obiekty javowe
//    modelPackage = "pl.zajavka.infrastructure.cepik.model"
//}
//
//// wygenerowane klasy maja byc traktowane jako kod zrodlowy
//sourceSets {
//    main {
//        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
//    }
//}
//
//// zanim kod zacznie sie kompilowac na etapie builda, najpierw uruchomiony ma zostac task openApiGenerate
//// czyli kod ma się kompilować po wygenrowaniu klas z kontraktu
//compileJava.dependsOn tasks.openApiGenerate

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava.options.encoding = 'UTF-8'