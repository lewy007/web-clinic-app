plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springBootDependencyManagementVersion}"
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
}

group = 'pl.szczecin'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // database
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    // annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // api
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"

    // Po wygenerowaniu klienta (plugin generator), trzeba bedzie dodać poniższe zależności, żeby kod się kompilował
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
//    implementation "io.swagger:swagger-annotations:${swaggerAnnotationVersion}"

    // warning: unknown enum constant When.MAYBE
    // reason: class file for javax.annotation.meta.When not found
    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'

    // Integration tests
    // Ta zależność musi być przed wiremock standalone
//    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
//    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
//    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

//https://github.com/OpenAPITools/openapi-generator/tree/master/modules
//https://openapi-generator.tech/docs/generators/java/
//https://openapi-generator.tech/docs/plugins

openApiGenerate {
    generatorName = "java"
    library = "webclient"
    configOptions = [
            serializableModel   : "true",
            dateLibrary         : "java8",
            serializationLibrary: "jackson"
    ]

    // Nazwa katalogu, w którym będzie można znaleźć wygenerowane klasy
    outputDir = "$buildDir/generated-sources/openapi".toString()
    // Lokalizacja pliku z kontraktem OpenAPI
    inputSpec = "$rootDir/src/main/resources/contracts/nfz-1.2.json".toString()
    // Nazwa (miejsce) paczki, która zostanie nadana wygenerowanym klientom
    apiPackage = "pl.szczecin.infrastructure.nfz.api"
    // Nazwa paczki, która zostanie nadana wygenerowanym klasom modelu
    // Miejsce zmapowania jsnow na obiekty javowe
    modelPackage = "pl.szczecin.infrastructure.nfz.model"
}

// wygenerowane klasy maja byc traktowane jako kod zrodlowy naszej aplikacji
sourceSets {
    main {
        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
    }
}

// Ta linijka natomiast wymusza wygenerowanie potrzebnych klas przed kompilacją kodu Java w
// trakcie trwania gradle build, czyli zanim kod zacznie sie kompilowac na etapie builda,
// najpierw uruchomiony ma zostac task openApiGenerate w celu wygenerowania klas z kontraktu
compileJava.dependsOn tasks.openApiGenerate

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

bootJar {
    archiveFileName = "web-clinic-app-1.0.${archiveExtension.get()}"
}

// Pozbywamy się dodatkowego pliku .jar z dopiskiem -plain z lokalizacji build/libs.
jar {
    enabled = false
}

compileJava.options.encoding = 'UTF-8'